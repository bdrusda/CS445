public class BinaryNode	//Slightly altered binary node class used to store characters{   private char data;   private BinaryNode leftChild;   private BinaryNode rightChild;   public BinaryNode()   {      this('\0');   }   public BinaryNode(char dataPortion)   {      this(dataPortion, null, null);   }    public BinaryNode(char dataPortion, BinaryNode newLeftChild, BinaryNode newRightChild)   {      data = dataPortion;      leftChild = newLeftChild;      rightChild = newRightChild;   }   public char getData()   {      return data;   }   public void setData(char newData)   {      data = newData;   }   public BinaryNode getLeftChild()   {      return leftChild;   }   public void setLeftChild(BinaryNode newLeftChild)   {      leftChild = newLeftChild;   }   public boolean hasLeftChild()   {      return leftChild != null;   }   public BinaryNode getRightChild()   {      return rightChild;   }    public void setRightChild(BinaryNode newRightChild)   {      rightChild = newRightChild;   }    public boolean hasRightChild()   {      return rightChild != null;   }    public boolean isLeaf()   {      return (leftChild == null) && (rightChild == null);   }   public int getNumberOfNodes()   {      int leftNumber = 0;      int rightNumber = 0;            if (leftChild != null)         leftNumber = leftChild.getNumberOfNodes();            if (rightChild != null)         rightNumber = rightChild.getNumberOfNodes();            return 1 + leftNumber + rightNumber;   }      public int getHeight()   {      return getHeight(this);   }   private int getHeight(BinaryNode node)   {      int height = 0;      if (node != null)         height = 1 + Math.max(getHeight(node.getLeftChild()), getHeight(node.getRightChild()));                                   return height;   }   public BinaryNode copy()   {      BinaryNode newRoot = new BinaryNode(data);            if (leftChild != null)         newRoot.setLeftChild(leftChild.copy());            if (rightChild != null)         newRoot.setRightChild(rightChild.copy());            return newRoot;   }   	public void inOrder()	{		inOrder(this);	}	private void inOrder(BinaryNode node)	{		if (node != null)		{			inOrder(node.leftChild);			System.out.print(node.data + " ");			inOrder(node.rightChild);		}	}	public void preOrder()	{		preOrder(this);	}	private void preOrder(BinaryNode node)	{		if (node != null)		{			System.out.print(node.data + " ");			preOrder(node.leftChild);			preOrder(node.rightChild);		}	}	public void postOrder()	{		postOrder(this);	}	private void postOrder(BinaryNode node)	{		if (node != null)		{			postOrder(node.leftChild);			postOrder(node.rightChild);			System.out.print(node.data + " ");		}	}}
